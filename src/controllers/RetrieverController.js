const multer = require('multer');
const fs = require('fs');
const axios = require('axios');

const minioClient = require("../minioConfig")
const checkDocumentIdentifier = require("../controllers/util/checkDocumentReference");
const { response } = require('express');


const fileInfo = {
  resourceName: "Xarelto",
  author: "X-Plain Patient Education",
  description: "This patient education program explains Xarelto.",
  "attachment" : {
      "contentType" : "document/pdf", 
      "language" : "en", 
      "data" : "", //if data is provided, url and hash are not permited
      "url" : "",  //if url is provided, data and hash are not permited
      "size" : "", 
      "hash" : "", //if hash is provided, data and url are not permited
      "title" : "How to take Xarelto", 
      "creation" : "2023-04-01", // Generated by the server 
      "height" : "0", //optional
      "width" : "0", //optional
      "frames" : "", //optional
      "duration" : "", //optional
      "pages" : "20" 
    }
  }

async function testConn (req, res) {

    try {
      const buckets = await minioClient.listBuckets()
      return res.status(200).send({"connection": "OK", "buckets": buckets})
    } catch (err) {
      return res.status(400).send({"connection": "FAILED", "error": err})
    }
}

async function uploadFile (req, res) {
  
  const imageBuffer = req.file.buffer;
  const imageName = req.file.originalname;
  const bucketName = process.env.GH_BUCKET;
  const url = "https://" + process.env.FHIR_URL + "DocumentReference"

  let fhirId

  const ifExists = await checkDocumentIdentifier(imageName)
  if (ifExists){
    return res.status(400).send({"upload": "FAILED", "error": "The document already exists in the FHIR server"})
  }
  else {

    try {
      const emptyFile = {
        "resourceType": "DocumentReference"
      }
    
      const response = await axios.post(url, emptyFile);
      fhirId = response.data.id
      console.log("Id: " + fhirId);
    } catch (error) {
        console.error(`Error: ${error}`);
        return res.status(500).send({"upload": "FAILED", "error": error})
    }

    minioClient.putObject(bucketName, imageName, imageBuffer, async function (err, etag) {
      if (err != null) {
        return res.status(500).send({"upload": "FAILED", "error": err})      
      }
      else {
        try {
          const fhir = {
            "resourceType": "DocumentReference",
            "meta": {
                "profile": [
                    "http://hl7.eu/fhir/ig/gravitate-health/StructureDefinition/ASM"
                ]
            },
            "text": {
                "status": "generated",
                "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\"><p><b>Generated Narrative: DocumentReference</b><a name=\"asm-2\"> </a></p><div style=\"display: inline-block; background-color: #d9e0e7; padding: 6px; margin: 4px; border: 1px solid #8da1b4; border-radius: 5px; line-height: 60%\"><p style=\"margin-bottom: 0px\">Resource DocumentReference &quot;asm-2&quot; </p><p style=\"margin-bottom: 0px\">Profile: <a href=\"StructureDefinition-ASM.html\">Additional Support Material Profile</a></p></div><p><b>identifier</b>: <code>http://example.org</code>/2</p><p><b>version</b>: 1.0</p><p><b>status</b>: current</p><p><b>docStatus</b>: final</p><p><b>subject</b>: <span>: Xarelto</span></p><p><b>author</b>: <span>: X-Plain Patient Education</span></p><p><b>description</b>: This patient education program explains Xarelto. Xarelto is also known as rivaroxaban. The program includes the following sections: what are the benefits of Xarelto, what are the risks of Xarelto, how does one take Xarelto, what are special considerations for Xarelto and when should you call your health care provider.</p><blockquote><p><b>content</b></p><h3>Attachments</h3><table class=\"grid\"><tr><td style=\"display: none\">-</td><td><b>ContentType</b></td><td><b>Language</b></td><td><b>Url</b></td><td><b>Duration</b></td></tr><tr><td style=\"display: none\">*</td><td>audio/mpeg</td><td>en</td><td><a href=\"https://www.youtube.com/watch?v=nJxoFG9Y8xE\">https://www.youtube.com/watch?v=nJxoFG9Y8xE</a></td><td>715</td></tr></table></blockquote></div>"
            },
            "identifier": [
                {
                    "system": "http://example.org",
                    "value": "how-to-take.pdf"
                }
            ],
            "version": "1.0",
            "status": "current",
            "docStatus": "final",
            "subject": {
                "display": "Xarelto"
            },
            "author": [
                {
                    "display": "X-Plain Patient Education"
                }
            ],
            "description": "This patient education program explains Xarelto. Xarelto is also known as rivaroxaban. The program includes the following sections: what are the benefits of Xarelto, what are the risks of Xarelto, how does one take Xarelto, what are special considerations for Xarelto and when should you call your health care provider.",
            "content": [
                {
                    "attachment": {
                        "contentType": "audio/mpeg",
                        "language": "en",
                        "url": "https://www.youtube.com/watch?v=nJxoFG9Y8xE",
                        "duration": 715
                    }
                }
            ]
        }
        
          const put_response = await axios.put(url + "/" + fhirId, fhir);
          return res.status(200).send({"upload": "SUCCESS", "Etag": etag, "fhir_object": put_response.data})

        } catch (error) {
            console.error(`Error: ${error}`);
            return res.status(500).send({"upload": "FAILED", "error": error})
        }
      }
    })
  }
  


}

async function retrieveFile(req,res ){
    const imageBuffer = parseInt(req.params.id);

    minioClient.bucketExists(process.env.GH_BUCKET, function (err, exists) {
        if (err) {
            return res.status(500).send({"status": "the bucket does not exist", "error": err}) 
        }
        if (exists) {
            // Search in minio and retrieve the file

            minioClient.presignedUrl('GET', process.env.GH_BUCKET, 'how-to-take.pdf', 60 , function (err, presignedUrl) {
              if (err) {
                return res.status(500).send({"status": "error creating the link", "error": err}) 
              }
              console.log(`\n\n${new Date().toLocaleString()} | Method: ${req.method} | URL: ${req.originalUrl} | OUT: ${presignedUrl}`)
              return res.status(200).send({"url": presignedUrl})
            })
        }
    })
}



module.exports = {
    testConn,
    uploadFile,
    retrieveFile
}